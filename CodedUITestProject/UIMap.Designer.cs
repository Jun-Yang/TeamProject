// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// MainWindow_BasicFunction - Use 'MainWindow_BasicFunctionParams' to pass parameters into this method.
        /// </summary>
        public void MainWindow_BasicFunction()
        {
            #region Variable Declarations
            WinTreeItem uIWINDOWSCTreeItem = this.UIOpenWindow.UITreeViewWindow.UITreeViewTree.UIDesktopTreeItem.UIComputerTreeItem.UIWINDOWSCTreeItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UIMusicLibraryListItem.UINameEdit;
            WinEdit uINameEdit1 = this.UIOpenWindow.UIItemWindow1.UIActormp3ListItem.UINameEdit;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            WinButton uISpeakersHeadphonesMuButton = this.UIUserPromotedNotificaWindow.UIUserPromotedNotificaToolBar.UISpeakersHeadphonesMuButton;
            WinButton uIUnmuteSpeakersHeadphButton = this.UIUnmuteSpeakersHeadphWindow.UIUnmuteSpeakersHeadphToolBar.UIUnmuteSpeakersHeadphButton;
            WinSlider uIItemSlider = this.UIItemWindow.UIItemWindow1.UIItemSlider;
            WpfWindow uIWpfWindow = this.UIWpfWindow;
            WpfMenuItem uIClearMenuItem = this.UIMusicPlayerWindow.UIItemMenu.UIEditMenuItem.UIClearMenuItem;
            WpfMenuItem uIImportToLibraryMenuItem = this.UIMusicPlayerWindow.UIItemMenu.UIFileMenuItem.UIImportToLibraryMenuItem;
            WinSplitButton uIWINDOWSCSplitButton = this.UIOpenWindow.UIAddressCMusicLibraryWindow.UIAddressCMusicLibraryToolBar.UIWINDOWSCSplitButton;
            WinSplitButton uIOpenSplitButton1 = this.UIOpenWindow.UIOpenWindow2.UIOpenSplitButton;
            WinEdit uINameEdit2 = this.UIOpenWindow.UIItemWindow1.UIMusicLibraryListItem.UINameEdit;
            WinEdit uINameEdit3 = this.UIOpenWindow.UIItemWindow2.UIForgivememp3ListItem.UINameEdit;
            WinSplitButton uIOpenSplitButton2 = this.UIOpenWindow.UIOpenWindow3.UIOpenSplitButton;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WpfMenuItem uIImporttoMusicLibraryMenuItem = this.UIMusicPlayerWindow.UIItemMenu1.UIImporttoMusicLibraryMenuItem;
            WinButton uIYesButton = this.UIQuestionWindow.UIYesWindow.UIYesButton;
            WpfMenuItem uIAddtoPlaylistMenuItem = this.UIMusicPlayerWindow.UIItemMenu1.UIAddtoPlaylistMenuItem;
            WpfMenuItem uIPropertyMenuItem = this.UIMusicPlayerWindow.UIItemMenu2.UIPropertyMenuItem;
            WpfMenuItem uIPauseMenuItem = this.UIMusicPlayerWindow.UIItemMenu.UIPlaybackMenuItem.UIPauseMenuItem;
            WpfMenuItem uIPreviousMenuItem = this.UIMusicPlayerWindow.UIItemMenu.UIPlaybackMenuItem.UIPreviousMenuItem;
            WpfMenuItem uINextMenuItem = this.UIMusicPlayerWindow.UIItemMenu.UIPlaybackMenuItem.UINextMenuItem;
            WpfMenuItem uIRandomMenuItem = this.UIMusicPlayerWindow.UIItemMenu.UIPlaybackMenuItem.UIRandomMenuItem;
            WpfMenuItem uIAboutMenuItem = this.UIMusicPlayerWindow.UIItemMenu.UIHelpMenuItem.UIAboutMenuItem;
            WinButton uIOKButton1 = this.UIAboutMusicPlayerWindow.UIOKWindow.UIOKButton;
            WpfWindow uIWpfWindow1 = this.UIMusicPlayerWindow.UIWpfWindow;
            WinTitleBar uIMusicPlayerTitleBar = this.UIMusicPlayerWindow1.UIMusicPlayerTitleBar;
            WpfMenuItem uIDeleteMenuItem = this.UIMusicPlayerWindow.UIItemMenu2.UIDeleteMenuItem;
            WpfMenuItem uIExitMenuItem = this.UIMusicPlayerWindow.UIItemMenu.UIFileMenuItem.UIExitMenuItem;
            WinButton uINOButton = this.UIMusicPlayerWindow2.UINOWindow.UINOButton;
            #endregion

            // Click 'Desktop' -> 'Computer' -> 'WINDOWS (C:)' tree item
            Mouse.Click(uIWINDOWSCTreeItem, new Point(83, 22));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(125, 21));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(61, 15));

            // Click 'Name' text box
            Mouse.Click(uINameEdit1, new Point(51, 15));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(22, 16));

            // Click 'Speakers / Headphones: Muted' button
            Mouse.Click(uISpeakersHeadphonesMuButton, new Point(18, 22));

            // Click 'Unmute Speakers / Headphones' button
            Mouse.Click(uIUnmuteSpeakersHeadphButton, new Point(24, 28));

            // Set position '31' in slider
            uIItemSlider.PositionAsString = this.MainWindow_BasicFunctionParams.UIItemSliderPositionAsString;

            // Double-Click 'Wpf' window
            Mouse.DoubleClick(uIWpfWindow, new Point(328, 264));

            // Double-Click 'Wpf' window
            Mouse.DoubleClick(uIWpfWindow, new Point(354, 295));

            // Double-Click 'Wpf' window
            Mouse.DoubleClick(uIWpfWindow, new Point(337, 132));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(174, 892));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(174, 892));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(174, 892));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(174, 892));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(174, 892));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(21, 892));

            // Double-Click 'Wpf' window
            Mouse.DoubleClick(uIWpfWindow, new Point(21, 892));

            // Double-Click 'Wpf' window
            Mouse.DoubleClick(uIWpfWindow, new Point(21, 892));

            // Double-Click 'Wpf' window
            Mouse.DoubleClick(uIWpfWindow, new Point(21, 892));

            // Double-Click 'Wpf' window
            Mouse.DoubleClick(uIWpfWindow, new Point(312, 351));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(21, 17));

            // Click 'Edit' -> 'Clear' menu item
            Mouse.Click(uIClearMenuItem, new Point(40, 14));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(16, 21));

            // Click 'File' -> 'Import To Library' menu item
            Mouse.Click(uIImportToLibraryMenuItem, new Point(40, 15));

            // Click 'WINDOWS (C:)' split button
            Mouse.Click(uIWINDOWSCSplitButton, new Point(44, 12));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(122, 18));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton1, new Point(48, 27));

            // Click 'WINDOWS (C:)' split button
            Mouse.Click(uIWINDOWSCSplitButton, new Point(52, 3));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit2, new Point(155, 11));

            // Click 'Name' text box
            Mouse.Click(uINameEdit3, new Point(90, 7));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton2, new Point(31, 24));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(13, 72));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(13, 51));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(146, 390));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(53, 14));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(52, 26));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(51, 20));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(38, 33));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(234, 72));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(113, 291));

            // Right-Click 'Wpf' window
            Mouse.Click(uIWpfWindow, MouseButtons.Right, ModifierKeys.None, new Point(137, 296));

            // Click 'Import to MusicLibrary' menu item
            Mouse.Click(uIImporttoMusicLibraryMenuItem, new Point(53, 20));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(54, 17));

            // Double-Click 'Wpf' window
            Mouse.DoubleClick(uIWpfWindow, new Point(363, 292));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(80, 892));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(123, 892));

            // Double-Click 'Wpf' window
            Mouse.DoubleClick(uIWpfWindow, new Point(307, 181));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(1245, 891));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(62, 8));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(54, 22));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(13, 22));

            // Click 'Edit' -> 'Clear' menu item
            Mouse.Click(uIClearMenuItem, new Point(66, 16));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(108, 22));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(90, 292));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(41, 15));

            // Right-Click 'Wpf' window
            Mouse.Click(uIWpfWindow, MouseButtons.Right, ModifierKeys.None, new Point(131, 295));

            // Click 'Add to Playlist' menu item
            Mouse.Click(uIAddtoPlaylistMenuItem, new Point(101, 17));

            // Right-Click 'Wpf' window
            Mouse.Click(uIWpfWindow, MouseButtons.Right, ModifierKeys.None, new Point(129, 293));

            // Click 'Import to MusicLibrary' menu item
            Mouse.Click(uIImporttoMusicLibraryMenuItem, new Point(64, 13));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(69, 11));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(472, 111));

            // Right-Click 'Wpf' window
            Mouse.Click(uIWpfWindow, MouseButtons.Right, ModifierKeys.None, new Point(537, 109));

            // Click 'Property' menu item
            Mouse.Click(uIPropertyMenuItem, new Point(90, 16));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(368, 459));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(164, 18));

            // Click 'Playback' -> 'Pause' menu item
            Mouse.Click(uIPauseMenuItem, new Point(71, 17));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(169, 25));

            // Click 'Playback' -> 'Previous' menu item
            Mouse.Click(uIPreviousMenuItem, new Point(88, 16));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(162, 20));

            // Click 'Playback' -> 'Next' menu item
            Mouse.Click(uINextMenuItem, new Point(29, 12));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(155, 15));

            // Click 'Playback' -> 'Random' menu item
            Mouse.Click(uIRandomMenuItem, new Point(67, 14));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(240, 23));

            // Click 'Help' -> 'About' menu item
            Mouse.Click(uIAboutMenuItem, new Point(37, 12));

            // Click '&OK' button
            Mouse.Click(uIOKButton1, new Point(39, 13));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(1087, 71));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(1093, 92));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(1092, 114));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(1074, 135));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(1095, 155));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(1087, 337));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(103, 19));

            // Click 'Edit' -> 'Clear' menu item
            Mouse.Click(uIClearMenuItem, new Point(56, 11));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(1102, 68));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(1070, 326));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(1083, 77));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(1056, 333));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(1074, 132));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(88, 296));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(67, 27));

            // Right-Click 'Wpf' window
            Mouse.Click(uIWpfWindow1, MouseButtons.Right, ModifierKeys.None, new Point(113, 263));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow1, new Point(151, 262));

            // Click 'MusicPlayer' title bar
            Mouse.Click(uIMusicPlayerTitleBar, new Point(199, 9));

            // Right-Click 'Wpf' window
            Mouse.Click(uIWpfWindow, MouseButtons.Right, ModifierKeys.None, new Point(117, 288));

            // Click 'Import to MusicLibrary' menu item
            Mouse.Click(uIImporttoMusicLibraryMenuItem, new Point(81, 19));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(27, 18));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(592, 166));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(695, 213));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(782, 253));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(789, 244));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(78, 889));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(78, 889));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(126, 891));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(82, 892));

            // Double-Click 'Wpf' window
            Mouse.DoubleClick(uIWpfWindow, new Point(332, 396));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(520, 372));

            // Right-Click 'Wpf' window
            Mouse.Click(uIWpfWindow, MouseButtons.Right, ModifierKeys.None, new Point(525, 371));

            // Click 'Delete' menu item
            Mouse.Click(uIDeleteMenuItem, new Point(41, 20));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(68, 19));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(1216, 888));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(8, 20));

            // Click 'File' -> 'Exit' menu item
            Mouse.Click(uIExitMenuItem, new Point(55, 23));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(43, 18));
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinWindow uITreeViewWindow = this.UIOpenWindow.UITreeViewWindow;
            WinWindow uIOpenWindow3 = this.UIOpenWindow.UIOpenWindow3;
            #endregion

            // Verify that the 'ControlType' property of 'Tree View' window equals 'Window'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UITreeViewWindowControlType, uITreeViewWindow.ControlType.ToString(), "Failure");

            // Verify that the 'ControlId' property of '&Open' window equals '1'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIOpenWindow3ControlId, uIOpenWindow3.ControlId);
        }
        
        /// <summary>
        /// Click all menu item and test all function in treeview directory and musicLibrary
        /// </summary>
        public void AllMenuClick()
        {
            #region Variable Declarations
            WpfWindow uIWpfWindow = this.UIWpfWindow;
            WpfMenuItem uIOpenFileMenuItem = this.UIMusicPlayerWindow.UIItemMenu.UIFileMenuItem.UIOpenFileMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UIBeautyoldmp3ListItem.UINameEdit;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            WpfMenuItem uIImporttoMusicLibraryMenuItem = this.UIMusicPlayerWindow.UIItemMenu1.UIImporttoMusicLibraryMenuItem;
            WinButton uIYesButton = this.UIQuestionWindow.UIYesWindow.UIYesButton;
            WinTitleBar uIMusicPlayerTitleBar = this.UIMusicPlayerWindow1.UIMusicPlayerTitleBar;
            WpfMenuItem uIPlayMenuItem = this.UIMusicPlayerWindow.UIItemMenu.UIPlaybackMenuItem.UIPlayMenuItem;
            WpfMenuItem uINextMenuItem = this.UIMusicPlayerWindow.UIItemMenu.UIPlaybackMenuItem.UINextMenuItem;
            WpfMenuItem uIPauseMenuItem = this.UIMusicPlayerWindow.UIItemMenu.UIPlaybackMenuItem.UIPauseMenuItem;
            WpfMenuItem uIClearMenuItem = this.UIMusicPlayerWindow.UIItemMenu.UILibraryMenuItem.UIClearMenuItem;
            WpfMenuItem uIConfigureMenuItem = this.UIMusicPlayerWindow.UIItemMenu.UILibraryMenuItem.UIConfigureMenuItem;
            WpfMenuItem uIAboutMenuItem = this.UIMusicPlayerWindow.UIItemMenu.UIHelpMenuItem.UIAboutMenuItem;
            WinButton uIOKButton = this.UIAboutMusicPlayerWindow.UIOKWindow.UIOKButton;
            WpfMenuItem uIContextMenuItem = this.UIMusicPlayerWindow.UIItemMenu.UIHelpMenuItem.UIContextMenuItem;
            WinButton uICloseButton = this.UIAboutMusicPlayerWindow.UIAboutMusicPlayerTitleBar.UICloseButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\01 Project\TeamProject\MusicLibrary\bin\Debug\MusicLibrary.exe'
            ApplicationUnderTest musicLibraryApplication = ApplicationUnderTest.Launch(this.AllMenuClickParams.ExePath, this.AllMenuClickParams.AlternateExePath);

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(21, 13));

            // Click 'File' -> 'Open File' menu item
            Mouse.Click(uIOpenFileMenuItem, new Point(49, 18));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(72, 22));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(50, 22));

            // Double-Click 'Wpf' window
            Mouse.DoubleClick(uIWpfWindow, new Point(366, 352));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(21, 891));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(21, 891));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(21, 891));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(21, 891));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(21, 891));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(21, 891));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(21, 891));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(21, 891));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(21, 891));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(21, 891));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(21, 891));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(170, 891));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(170, 891));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(170, 891));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(170, 891));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(170, 891));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(170, 891));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(170, 891));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(170, 891));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(170, 891));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(170, 891));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(170, 891));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(128, 885));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(96, 32));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(13, 37));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(113, 282));

            // Right-Click 'Wpf' window
            Mouse.Click(uIWpfWindow, MouseButtons.Right, ModifierKeys.None, new Point(141, 282));

            // Click 'Import to MusicLibrary' menu item
            Mouse.Click(uIImporttoMusicLibraryMenuItem, new Point(99, 17));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(33, 26));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(319, 389));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(348, 402));

            // Click 'MusicPlayer' title bar
            Mouse.Click(uIMusicPlayerTitleBar, new Point(117, 20));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(204, 10));

            // Click 'Playback' -> 'Play' menu item
            Mouse.Click(uIPlayMenuItem, new Point(40, 14));

            // Double-Click 'Wpf' window
            Mouse.DoubleClick(uIWpfWindow, new Point(347, 432));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(210, 13));

            // Click 'Playback' -> 'Next' menu item
            Mouse.Click(uINextMenuItem, new Point(100, 17));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(210, 14));

            // Click 'Playback' -> 'Next' menu item
            Mouse.Click(uINextMenuItem, new Point(69, 15));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(217, 13));

            // Click 'Playback' -> 'Pause' menu item
            Mouse.Click(uIPauseMenuItem, new Point(64, 16));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(74, 8));

            // Click 'Library' -> 'Clear' menu item
            Mouse.Click(uIClearMenuItem, new Point(45, 19));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(137, 7));

            // Click 'Library' -> 'Configure' menu item
            Mouse.Click(uIConfigureMenuItem, new Point(89, 17));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(141, 17));

            // Click 'Help' -> 'About' menu item
            Mouse.Click(uIAboutMenuItem, new Point(41, 18));

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(79, 24));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(318, 5));

            // Click 'Help' -> 'Context' menu item
            Mouse.Click(uIContextMenuItem, new Point(30, 1));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(337, 15));

            // Click 'Help' -> 'About' menu item
            Mouse.Click(uIAboutMenuItem, new Point(32, 8));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(18, 4));
        }
        
        /// <summary>
        /// Playback_Click
        /// </summary>
        public void Playback_Click()
        {
            #region Variable Declarations
            WpfWindow uIWpfWindow = this.UIWpfWindow;
            WpfMenuItem uIPlayMenuItem = this.UIMusicPlayerWindow.UIItemMenu.UIPlaybackMenuItem.UIPlayMenuItem;
            WpfMenuItem uIStopMenuItem = this.UIMusicPlayerWindow.UIItemMenu.UIPlaybackMenuItem.UIStopMenuItem;
            WpfMenuItem uIPauseMenuItem = this.UIMusicPlayerWindow.UIItemMenu.UIPlaybackMenuItem.UIPauseMenuItem;
            #endregion

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(198, 15));

            // Click 'Playback' -> 'Play' menu item
            Mouse.Click(uIPlayMenuItem, new Point(81, 13));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(353, 98));

            // Double-Click 'Wpf' window
            Mouse.DoubleClick(uIWpfWindow, new Point(346, 91));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(194, 11));

            // Click 'Playback' -> 'Stop' menu item
            Mouse.Click(uIStopMenuItem, new Point(49, 16));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(189, 16));

            // Right-Click 'Wpf' window
            Mouse.Click(uIWpfWindow, MouseButtons.Right, ModifierKeys.None, new Point(394, 96));

            // Double-Click 'Wpf' window
            Mouse.DoubleClick(uIWpfWindow, new Point(373, 96));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(193, 13));

            // Click 'Playback' -> 'Pause' menu item
            Mouse.Click(uIPauseMenuItem, new Point(43, 18));
        }
        
        /// <summary>
        /// test my function Property_Click
        /// </summary>
        public void EditmediaProperty()
        {
            #region Variable Declarations
            WpfWindow uIWpfWindow = this.UIWpfWindow;
            WpfMenuItem uIPropertyMenuItem = this.UIMusicPlayerWindow.UIItemMenu1.UIPropertyMenuItem;
            WpfEdit uITbYearEdit = this.UIMediaPropertyWindow.UITbYearEdit;
            WpfEdit uITbDescriptionEdit = this.UIMediaPropertyWindow.UITbDescriptionEdit;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(381, 141));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(386, 173));

            // Right-Click 'Wpf' window
            Mouse.Click(uIWpfWindow, MouseButtons.Right, ModifierKeys.None, new Point(386, 173));

            // Click 'Property' menu item
            Mouse.Click(uIPropertyMenuItem, new Point(53, 20));

            // Type '2009' in 'tbYear' text box
            uITbYearEdit.Text = this.EditmediaPropertyParams.UITbYearEditText;

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(228, 341));

            // Type 'This is a very very good songs' in 'tbDescription' text box
            uITbDescriptionEdit.Text = this.EditmediaPropertyParams.UITbDescriptionEditText;

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(376, 344));

            // Type 'This is a very very good songs        and I really love this song and this artist' in 'tbDescription' text box
            uITbDescriptionEdit.Text = this.EditmediaPropertyParams.UITbDescriptionEditText1;

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(180, 465));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(54, 15));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(363, 462));
        }
        
        #region Properties
        public virtual MainWindow_BasicFunctionParams MainWindow_BasicFunctionParams
        {
            get
            {
                if ((this.mMainWindow_BasicFunctionParams == null))
                {
                    this.mMainWindow_BasicFunctionParams = new MainWindow_BasicFunctionParams();
                }
                return this.mMainWindow_BasicFunctionParams;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual AllMenuClickParams AllMenuClickParams
        {
            get
            {
                if ((this.mAllMenuClickParams == null))
                {
                    this.mAllMenuClickParams = new AllMenuClickParams();
                }
                return this.mAllMenuClickParams;
            }
        }
        
        public virtual EditmediaPropertyParams EditmediaPropertyParams
        {
            get
            {
                if ((this.mEditmediaPropertyParams == null))
                {
                    this.mEditmediaPropertyParams = new EditmediaPropertyParams();
                }
                return this.mEditmediaPropertyParams;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UIUserPromotedNotificaWindow UIUserPromotedNotificaWindow
        {
            get
            {
                if ((this.mUIUserPromotedNotificaWindow == null))
                {
                    this.mUIUserPromotedNotificaWindow = new UIUserPromotedNotificaWindow();
                }
                return this.mUIUserPromotedNotificaWindow;
            }
        }
        
        public UIUnmuteSpeakersHeadphWindow UIUnmuteSpeakersHeadphWindow
        {
            get
            {
                if ((this.mUIUnmuteSpeakersHeadphWindow == null))
                {
                    this.mUIUnmuteSpeakersHeadphWindow = new UIUnmuteSpeakersHeadphWindow();
                }
                return this.mUIUnmuteSpeakersHeadphWindow;
            }
        }
        
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIWpfWindow UIWpfWindow
        {
            get
            {
                if ((this.mUIWpfWindow == null))
                {
                    this.mUIWpfWindow = new UIWpfWindow();
                }
                return this.mUIWpfWindow;
            }
        }
        
        public UIMusicPlayerWindow UIMusicPlayerWindow
        {
            get
            {
                if ((this.mUIMusicPlayerWindow == null))
                {
                    this.mUIMusicPlayerWindow = new UIMusicPlayerWindow();
                }
                return this.mUIMusicPlayerWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow();
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIQuestionWindow UIQuestionWindow
        {
            get
            {
                if ((this.mUIQuestionWindow == null))
                {
                    this.mUIQuestionWindow = new UIQuestionWindow();
                }
                return this.mUIQuestionWindow;
            }
        }
        
        public UIAboutMusicPlayerWindow UIAboutMusicPlayerWindow
        {
            get
            {
                if ((this.mUIAboutMusicPlayerWindow == null))
                {
                    this.mUIAboutMusicPlayerWindow = new UIAboutMusicPlayerWindow();
                }
                return this.mUIAboutMusicPlayerWindow;
            }
        }
        
        public UIMusicPlayerWindow1 UIMusicPlayerWindow1
        {
            get
            {
                if ((this.mUIMusicPlayerWindow1 == null))
                {
                    this.mUIMusicPlayerWindow1 = new UIMusicPlayerWindow1();
                }
                return this.mUIMusicPlayerWindow1;
            }
        }
        
        public UIMusicPlayerWindow2 UIMusicPlayerWindow2
        {
            get
            {
                if ((this.mUIMusicPlayerWindow2 == null))
                {
                    this.mUIMusicPlayerWindow2 = new UIMusicPlayerWindow2();
                }
                return this.mUIMusicPlayerWindow2;
            }
        }
        
        public UIMediaPropertyWindow UIMediaPropertyWindow
        {
            get
            {
                if ((this.mUIMediaPropertyWindow == null))
                {
                    this.mUIMediaPropertyWindow = new UIMediaPropertyWindow();
                }
                return this.mUIMediaPropertyWindow;
            }
        }
        #endregion
        
        #region Fields
        private MainWindow_BasicFunctionParams mMainWindow_BasicFunctionParams;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private AllMenuClickParams mAllMenuClickParams;
        
        private EditmediaPropertyParams mEditmediaPropertyParams;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UIUserPromotedNotificaWindow mUIUserPromotedNotificaWindow;
        
        private UIUnmuteSpeakersHeadphWindow mUIUnmuteSpeakersHeadphWindow;
        
        private UIItemWindow3 mUIItemWindow;
        
        private UIWpfWindow mUIWpfWindow;
        
        private UIMusicPlayerWindow mUIMusicPlayerWindow;
        
        private UIOKWindow mUIOKWindow;
        
        private UIQuestionWindow mUIQuestionWindow;
        
        private UIAboutMusicPlayerWindow mUIAboutMusicPlayerWindow;
        
        private UIMusicPlayerWindow1 mUIMusicPlayerWindow1;
        
        private UIMusicPlayerWindow2 mUIMusicPlayerWindow2;
        
        private UIMediaPropertyWindow mUIMediaPropertyWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MainWindow_BasicFunction'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MainWindow_BasicFunctionParams
    {
        
        #region Fields
        /// <summary>
        /// Set position '31' in slider
        /// </summary>
        public string UIItemSliderPositionAsString = "31";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'Tree View' window equals 'Window'
        /// </summary>
        public string UITreeViewWindowControlType = "Window";
        
        /// <summary>
        /// Verify that the 'ControlId' property of '&Open' window equals '1'
        /// </summary>
        public int UIOpenWindow3ControlId = 1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AllMenuClick'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AllMenuClickParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\01 Project\TeamProject\MusicLibrary\bin\Debug\MusicLibrary.exe'
        /// </summary>
        public string ExePath = "C:\\Users\\ipd\\Documents\\01 Project\\TeamProject\\MusicLibrary\\bin\\Debug\\MusicLibrary" +
            ".exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\01 Project\TeamProject\MusicLibrary\bin\Debug\MusicLibrary.exe'
        /// </summary>
        public string AlternateExePath = "%USERPROFILE%\\Documents\\01 Project\\TeamProject\\MusicLibrary\\bin\\Debug\\MusicLibrar" +
            "y.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditmediaProperty'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class EditmediaPropertyParams
    {
        
        #region Fields
        /// <summary>
        /// Type '2009' in 'tbYear' text box
        /// </summary>
        public string UITbYearEditText = "2009";
        
        /// <summary>
        /// Type 'This is a very very good songs' in 'tbDescription' text box
        /// </summary>
        public string UITbDescriptionEditText = "This is a very very good songs";
        
        /// <summary>
        /// Type 'This is a very very good songs        and I really love this song and this artist' in 'tbDescription' text box
        /// </summary>
        public string UITbDescriptionEditText1 = "This is a very very good songs        and I really love this song and this artist" +
            "";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UITreeViewWindow UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        
        public UIAddressCMusicLibraryWindow UIAddressCMusicLibraryWindow
        {
            get
            {
                if ((this.mUIAddressCMusicLibraryWindow == null))
                {
                    this.mUIAddressCMusicLibraryWindow = new UIAddressCMusicLibraryWindow(this);
                }
                return this.mUIAddressCMusicLibraryWindow;
            }
        }
        
        public UIOpenWindow2 UIOpenWindow2
        {
            get
            {
                if ((this.mUIOpenWindow2 == null))
                {
                    this.mUIOpenWindow2 = new UIOpenWindow2(this);
                }
                return this.mUIOpenWindow2;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIOpenWindow3 UIOpenWindow3
        {
            get
            {
                if ((this.mUIOpenWindow3 == null))
                {
                    this.mUIOpenWindow3 = new UIOpenWindow3(this);
                }
                return this.mUIOpenWindow3;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewWindow mUITreeViewWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIOpenWindow1 mUIOpenWindow1;
        
        private UIAddressCMusicLibraryWindow mUIAddressCMusicLibraryWindow;
        
        private UIOpenWindow2 mUIOpenWindow2;
        
        private UIItemWindow2 mUIItemWindow2;
        
        private UIOpenWindow3 mUIOpenWindow3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITreeViewWindow : WinWindow
    {
        
        public UITreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UITreeViewTree UITreeViewTree
        {
            get
            {
                if ((this.mUITreeViewTree == null))
                {
                    this.mUITreeViewTree = new UITreeViewTree(this);
                }
                return this.mUITreeViewTree;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewTree mUITreeViewTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITreeViewTree : WinTree
    {
        
        public UITreeViewTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Namespace Tree Control";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIDesktopTreeItem UIDesktopTreeItem
        {
            get
            {
                if ((this.mUIDesktopTreeItem == null))
                {
                    this.mUIDesktopTreeItem = new UIDesktopTreeItem(this);
                }
                return this.mUIDesktopTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopTreeItem mUIDesktopTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDesktopTreeItem : WinTreeItem
    {
        
        public UIDesktopTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Desktop";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIComputerTreeItem UIComputerTreeItem
        {
            get
            {
                if ((this.mUIComputerTreeItem == null))
                {
                    this.mUIComputerTreeItem = new UIComputerTreeItem(this);
                }
                return this.mUIComputerTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIComputerTreeItem mUIComputerTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIComputerTreeItem : WinTreeItem
    {
        
        public UIComputerTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Computer";
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIWINDOWSCTreeItem
        {
            get
            {
                if ((this.mUIWINDOWSCTreeItem == null))
                {
                    this.mUIWINDOWSCTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIWINDOWSCTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "WINDOWS (C:)";
                    this.mUIWINDOWSCTreeItem.SearchProperties["Value"] = "2";
                    this.mUIWINDOWSCTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIWINDOWSCTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIWINDOWSCTreeItem.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIWINDOWSCTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIWINDOWSCTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIMusicLibraryListItem UIMusicLibraryListItem
        {
            get
            {
                if ((this.mUIMusicLibraryListItem == null))
                {
                    this.mUIMusicLibraryListItem = new UIMusicLibraryListItem(this);
                }
                return this.mUIMusicLibraryListItem;
            }
        }
        
        public UIBeautyoldmp3ListItem UIBeautyoldmp3ListItem
        {
            get
            {
                if ((this.mUIBeautyoldmp3ListItem == null))
                {
                    this.mUIBeautyoldmp3ListItem = new UIBeautyoldmp3ListItem(this);
                }
                return this.mUIBeautyoldmp3ListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIMusicLibraryListItem mUIMusicLibraryListItem;
        
        private UIBeautyoldmp3ListItem mUIBeautyoldmp3ListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMusicLibraryListItem : WinListItem
    {
        
        public UIMusicLibraryListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "MusicLibrary";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIBeautyoldmp3ListItem : WinListItem
    {
        
        public UIBeautyoldmp3ListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "beauty old.mp3";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIActormp3ListItem UIActormp3ListItem
        {
            get
            {
                if ((this.mUIActormp3ListItem == null))
                {
                    this.mUIActormp3ListItem = new UIActormp3ListItem(this);
                }
                return this.mUIActormp3ListItem;
            }
        }
        
        public UIMusicLibraryListItem1 UIMusicLibraryListItem
        {
            get
            {
                if ((this.mUIMusicLibraryListItem == null))
                {
                    this.mUIMusicLibraryListItem = new UIMusicLibraryListItem1(this);
                }
                return this.mUIMusicLibraryListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIActormp3ListItem mUIActormp3ListItem;
        
        private UIMusicLibraryListItem1 mUIMusicLibraryListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIActormp3ListItem : WinListItem
    {
        
        public UIActormp3ListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "actor.mp3";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMusicLibraryListItem1 : WinListItem
    {
        
        public UIMusicLibraryListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "MusicLibrary";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAddressCMusicLibraryWindow : WinWindow
    {
        
        public UIAddressCMusicLibraryWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIAddressCMusicLibraryToolBar UIAddressCMusicLibraryToolBar
        {
            get
            {
                if ((this.mUIAddressCMusicLibraryToolBar == null))
                {
                    this.mUIAddressCMusicLibraryToolBar = new UIAddressCMusicLibraryToolBar(this);
                }
                return this.mUIAddressCMusicLibraryToolBar;
            }
        }
        #endregion
        
        #region Fields
        private UIAddressCMusicLibraryToolBar mUIAddressCMusicLibraryToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAddressCMusicLibraryToolBar : WinToolBar
    {
        
        public UIAddressCMusicLibraryToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Address: C:\\MusicLibrary";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIWINDOWSCSplitButton
        {
            get
            {
                if ((this.mUIWINDOWSCSplitButton == null))
                {
                    this.mUIWINDOWSCSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIWINDOWSCSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "WINDOWS (C:)";
                    this.mUIWINDOWSCSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIWINDOWSCSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIWINDOWSCSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOpenWindow2 : WinWindow
    {
        
        public UIOpenWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIForgivememp3ListItem UIForgivememp3ListItem
        {
            get
            {
                if ((this.mUIForgivememp3ListItem == null))
                {
                    this.mUIForgivememp3ListItem = new UIForgivememp3ListItem(this);
                }
                return this.mUIForgivememp3ListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIForgivememp3ListItem mUIForgivememp3ListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIForgivememp3ListItem : WinListItem
    {
        
        public UIForgivememp3ListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "forgive me.mp3";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOpenWindow3 : WinWindow
    {
        
        public UIOpenWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUserPromotedNotificaWindow : WinWindow
    {
        
        public UIUserPromotedNotificaWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "User Promoted Notification Area";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ToolbarWindow32";
            this.WindowTitles.Add("User Promoted Notification Area");
            #endregion
        }
        
        #region Properties
        public UIUserPromotedNotificaToolBar UIUserPromotedNotificaToolBar
        {
            get
            {
                if ((this.mUIUserPromotedNotificaToolBar == null))
                {
                    this.mUIUserPromotedNotificaToolBar = new UIUserPromotedNotificaToolBar(this);
                }
                return this.mUIUserPromotedNotificaToolBar;
            }
        }
        #endregion
        
        #region Fields
        private UIUserPromotedNotificaToolBar mUIUserPromotedNotificaToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUserPromotedNotificaToolBar : WinToolBar
    {
        
        public UIUserPromotedNotificaToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "User Promoted Notification Area";
            this.WindowTitles.Add("User Promoted Notification Area");
            #endregion
        }
        
        #region Properties
        public WinButton UISpeakersHeadphonesMuButton
        {
            get
            {
                if ((this.mUISpeakersHeadphonesMuButton == null))
                {
                    this.mUISpeakersHeadphonesMuButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISpeakersHeadphonesMuButton.SearchProperties[WinButton.PropertyNames.Name] = "Speakers / Headphones: Muted";
                    this.mUISpeakersHeadphonesMuButton.WindowTitles.Add("User Promoted Notification Area");
                    #endregion
                }
                return this.mUISpeakersHeadphonesMuButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISpeakersHeadphonesMuButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUnmuteSpeakersHeadphWindow : WinWindow
    {
        
        public UIUnmuteSpeakersHeadphWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Unmute Speakers / Headphones";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ToolbarWindow32";
            this.WindowTitles.Add("Unmute Speakers / Headphones");
            #endregion
        }
        
        #region Properties
        public UIUnmuteSpeakersHeadphToolBar UIUnmuteSpeakersHeadphToolBar
        {
            get
            {
                if ((this.mUIUnmuteSpeakersHeadphToolBar == null))
                {
                    this.mUIUnmuteSpeakersHeadphToolBar = new UIUnmuteSpeakersHeadphToolBar(this);
                }
                return this.mUIUnmuteSpeakersHeadphToolBar;
            }
        }
        #endregion
        
        #region Fields
        private UIUnmuteSpeakersHeadphToolBar mUIUnmuteSpeakersHeadphToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUnmuteSpeakersHeadphToolBar : WinToolBar
    {
        
        public UIUnmuteSpeakersHeadphToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Unmute Speakers / Headphones";
            #endregion
        }
        
        #region Properties
        public WinButton UIUnmuteSpeakersHeadphButton
        {
            get
            {
                if ((this.mUIUnmuteSpeakersHeadphButton == null))
                {
                    this.mUIUnmuteSpeakersHeadphButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIUnmuteSpeakersHeadphButton.SearchProperties[WinButton.PropertyNames.Name] = "Unmute Speakers / Headphones";
                    this.mUIUnmuteSpeakersHeadphButton.WindowTitles.Add("Unmute Speakers / Headphones");
                    #endregion
                }
                return this.mUIUnmuteSpeakersHeadphButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIUnmuteSpeakersHeadphButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow11 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "304";
            #endregion
        }
        
        #region Properties
        public WinSlider UIItemSlider
        {
            get
            {
                if ((this.mUIItemSlider == null))
                {
                    this.mUIItemSlider = new WinSlider(this);
                }
                return this.mUIItemSlider;
            }
        }
        #endregion
        
        #region Fields
        private WinSlider mUIItemSlider;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIWpfWindow : WpfWindow
    {
        
        public UIWpfWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMusicPlayerWindow : WpfWindow
    {
        
        public UIMusicPlayerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MusicPlayer";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MusicPlayer");
            #endregion
        }
        
        #region Properties
        public UIItemMenu UIItemMenu
        {
            get
            {
                if ((this.mUIItemMenu == null))
                {
                    this.mUIItemMenu = new UIItemMenu(this);
                }
                return this.mUIItemMenu;
            }
        }
        
        public UIItemMenu1 UIItemMenu1
        {
            get
            {
                if ((this.mUIItemMenu1 == null))
                {
                    this.mUIItemMenu1 = new UIItemMenu1(this);
                }
                return this.mUIItemMenu1;
            }
        }
        
        public UIItemMenu2 UIItemMenu2
        {
            get
            {
                if ((this.mUIItemMenu2 == null))
                {
                    this.mUIItemMenu2 = new UIItemMenu2(this);
                }
                return this.mUIItemMenu2;
            }
        }
        
        public WpfWindow UIWpfWindow
        {
            get
            {
                if ((this.mUIWpfWindow == null))
                {
                    this.mUIWpfWindow = new WpfWindow(this);
                    #region Search Criteria
                    this.mUIWpfWindow.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
                    this.mUIWpfWindow.WindowTitles.Add("MusicPlayer");
                    #endregion
                }
                return this.mUIWpfWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemMenu mUIItemMenu;
        
        private UIItemMenu1 mUIItemMenu1;
        
        private UIItemMenu2 mUIItemMenu2;
        
        private WpfWindow mUIWpfWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemMenu : WpfMenu
    {
        
        public UIItemMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("MusicPlayer");
            #endregion
        }
        
        #region Properties
        public UIEditMenuItem UIEditMenuItem
        {
            get
            {
                if ((this.mUIEditMenuItem == null))
                {
                    this.mUIEditMenuItem = new UIEditMenuItem(this);
                }
                return this.mUIEditMenuItem;
            }
        }
        
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public UIPlaybackMenuItem UIPlaybackMenuItem
        {
            get
            {
                if ((this.mUIPlaybackMenuItem == null))
                {
                    this.mUIPlaybackMenuItem = new UIPlaybackMenuItem(this);
                }
                return this.mUIPlaybackMenuItem;
            }
        }
        
        public UIHelpMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new UIHelpMenuItem(this);
                }
                return this.mUIHelpMenuItem;
            }
        }
        
        public UILibraryMenuItem UILibraryMenuItem
        {
            get
            {
                if ((this.mUILibraryMenuItem == null))
                {
                    this.mUILibraryMenuItem = new UILibraryMenuItem(this);
                }
                return this.mUILibraryMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIEditMenuItem mUIEditMenuItem;
        
        private UIFileMenuItem mUIFileMenuItem;
        
        private UIPlaybackMenuItem mUIPlaybackMenuItem;
        
        private UIHelpMenuItem mUIHelpMenuItem;
        
        private UILibraryMenuItem mUILibraryMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEditMenuItem : WpfMenuItem
    {
        
        public UIEditMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Edit";
            this.WindowTitles.Add("MusicPlayer");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem UIClearMenuItem
        {
            get
            {
                if ((this.mUIClearMenuItem == null))
                {
                    this.mUIClearMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIClearMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "MiClear";
                    this.mUIClearMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIClearMenuItem.WindowTitles.Add("MusicPlayer");
                    #endregion
                }
                return this.mUIClearMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mUIClearMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFileMenuItem : WpfMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("MusicPlayer");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem UIImportToLibraryMenuItem
        {
            get
            {
                if ((this.mUIImportToLibraryMenuItem == null))
                {
                    this.mUIImportToLibraryMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIImportToLibraryMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "MiImportToLibrary";
                    this.mUIImportToLibraryMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIImportToLibraryMenuItem.WindowTitles.Add("MusicPlayer");
                    #endregion
                }
                return this.mUIImportToLibraryMenuItem;
            }
        }
        
        public WpfMenuItem UIExitMenuItem
        {
            get
            {
                if ((this.mUIExitMenuItem == null))
                {
                    this.mUIExitMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIExitMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "MiExit";
                    this.mUIExitMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIExitMenuItem.WindowTitles.Add("MusicPlayer");
                    #endregion
                }
                return this.mUIExitMenuItem;
            }
        }
        
        public WpfMenuItem UIOpenFileMenuItem
        {
            get
            {
                if ((this.mUIOpenFileMenuItem == null))
                {
                    this.mUIOpenFileMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenFileMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "MiOpen";
                    this.mUIOpenFileMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenFileMenuItem.WindowTitles.Add("MusicPlayer");
                    #endregion
                }
                return this.mUIOpenFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mUIImportToLibraryMenuItem;
        
        private WpfMenuItem mUIExitMenuItem;
        
        private WpfMenuItem mUIOpenFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPlaybackMenuItem : WpfMenuItem
    {
        
        public UIPlaybackMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Playback";
            this.WindowTitles.Add("MusicPlayer");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem UIPauseMenuItem
        {
            get
            {
                if ((this.mUIPauseMenuItem == null))
                {
                    this.mUIPauseMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIPauseMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "MiPause";
                    this.mUIPauseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIPauseMenuItem.WindowTitles.Add("MusicPlayer");
                    #endregion
                }
                return this.mUIPauseMenuItem;
            }
        }
        
        public WpfMenuItem UIPreviousMenuItem
        {
            get
            {
                if ((this.mUIPreviousMenuItem == null))
                {
                    this.mUIPreviousMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIPreviousMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "MiPrevious";
                    this.mUIPreviousMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIPreviousMenuItem.WindowTitles.Add("MusicPlayer");
                    #endregion
                }
                return this.mUIPreviousMenuItem;
            }
        }
        
        public WpfMenuItem UINextMenuItem
        {
            get
            {
                if ((this.mUINextMenuItem == null))
                {
                    this.mUINextMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUINextMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "MiNext";
                    this.mUINextMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINextMenuItem.WindowTitles.Add("MusicPlayer");
                    #endregion
                }
                return this.mUINextMenuItem;
            }
        }
        
        public WpfMenuItem UIRandomMenuItem
        {
            get
            {
                if ((this.mUIRandomMenuItem == null))
                {
                    this.mUIRandomMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIRandomMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "MiRandom";
                    this.mUIRandomMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIRandomMenuItem.WindowTitles.Add("MusicPlayer");
                    #endregion
                }
                return this.mUIRandomMenuItem;
            }
        }
        
        public WpfMenuItem UIPlayMenuItem
        {
            get
            {
                if ((this.mUIPlayMenuItem == null))
                {
                    this.mUIPlayMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIPlayMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "MiPlay";
                    this.mUIPlayMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIPlayMenuItem.WindowTitles.Add("MusicPlayer");
                    #endregion
                }
                return this.mUIPlayMenuItem;
            }
        }
        
        public WpfMenuItem UIStopMenuItem
        {
            get
            {
                if ((this.mUIStopMenuItem == null))
                {
                    this.mUIStopMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIStopMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "MiStop";
                    this.mUIStopMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIStopMenuItem.WindowTitles.Add("MusicPlayer");
                    #endregion
                }
                return this.mUIStopMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mUIPauseMenuItem;
        
        private WpfMenuItem mUIPreviousMenuItem;
        
        private WpfMenuItem mUINextMenuItem;
        
        private WpfMenuItem mUIRandomMenuItem;
        
        private WpfMenuItem mUIPlayMenuItem;
        
        private WpfMenuItem mUIStopMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIHelpMenuItem : WpfMenuItem
    {
        
        public UIHelpMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Help";
            this.WindowTitles.Add("MusicPlayer");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem UIAboutMenuItem
        {
            get
            {
                if ((this.mUIAboutMenuItem == null))
                {
                    this.mUIAboutMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIAboutMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "About";
                    this.mUIAboutMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIAboutMenuItem.WindowTitles.Add("MusicPlayer");
                    #endregion
                }
                return this.mUIAboutMenuItem;
            }
        }
        
        public WpfMenuItem UIContextMenuItem
        {
            get
            {
                if ((this.mUIContextMenuItem == null))
                {
                    this.mUIContextMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIContextMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Context";
                    this.mUIContextMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIContextMenuItem.WindowTitles.Add("MusicPlayer");
                    #endregion
                }
                return this.mUIContextMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mUIAboutMenuItem;
        
        private WpfMenuItem mUIContextMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILibraryMenuItem : WpfMenuItem
    {
        
        public UILibraryMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Library";
            this.WindowTitles.Add("MusicPlayer");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem UIClearMenuItem
        {
            get
            {
                if ((this.mUIClearMenuItem == null))
                {
                    this.mUIClearMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIClearMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "MiClear";
                    this.mUIClearMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIClearMenuItem.WindowTitles.Add("MusicPlayer");
                    #endregion
                }
                return this.mUIClearMenuItem;
            }
        }
        
        public WpfMenuItem UIConfigureMenuItem
        {
            get
            {
                if ((this.mUIConfigureMenuItem == null))
                {
                    this.mUIConfigureMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIConfigureMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Configure";
                    this.mUIConfigureMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIConfigureMenuItem.WindowTitles.Add("MusicPlayer");
                    #endregion
                }
                return this.mUIConfigureMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mUIClearMenuItem;
        
        private WpfMenuItem mUIConfigureMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemMenu1 : WpfMenu
    {
        
        public UIItemMenu1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.ClassName] = "Uia.ContextMenu";
            this.WindowTitles.Add("MusicPlayer");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem UIImporttoMusicLibraryMenuItem
        {
            get
            {
                if ((this.mUIImporttoMusicLibraryMenuItem == null))
                {
                    this.mUIImporttoMusicLibraryMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIImporttoMusicLibraryMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Import to MusicLibrary";
                    this.mUIImporttoMusicLibraryMenuItem.WindowTitles.Add("MusicPlayer");
                    #endregion
                }
                return this.mUIImporttoMusicLibraryMenuItem;
            }
        }
        
        public WpfMenuItem UIAddtoPlaylistMenuItem
        {
            get
            {
                if ((this.mUIAddtoPlaylistMenuItem == null))
                {
                    this.mUIAddtoPlaylistMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIAddtoPlaylistMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Add to Playlist";
                    this.mUIAddtoPlaylistMenuItem.WindowTitles.Add("MusicPlayer");
                    #endregion
                }
                return this.mUIAddtoPlaylistMenuItem;
            }
        }
        
        public WpfMenuItem UIPropertyMenuItem
        {
            get
            {
                if ((this.mUIPropertyMenuItem == null))
                {
                    this.mUIPropertyMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIPropertyMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Property";
                    this.mUIPropertyMenuItem.WindowTitles.Add("MusicPlayer");
                    #endregion
                }
                return this.mUIPropertyMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mUIImporttoMusicLibraryMenuItem;
        
        private WpfMenuItem mUIAddtoPlaylistMenuItem;
        
        private WpfMenuItem mUIPropertyMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemMenu2 : WpfMenu
    {
        
        public UIItemMenu2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.ClassName] = "Uia.ContextMenu";
            this.WindowTitles.Add("MusicPlayer");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem UIPropertyMenuItem
        {
            get
            {
                if ((this.mUIPropertyMenuItem == null))
                {
                    this.mUIPropertyMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIPropertyMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Property";
                    this.mUIPropertyMenuItem.WindowTitles.Add("MusicPlayer");
                    #endregion
                }
                return this.mUIPropertyMenuItem;
            }
        }
        
        public WpfMenuItem UIDeleteMenuItem
        {
            get
            {
                if ((this.mUIDeleteMenuItem == null))
                {
                    this.mUIDeleteMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIDeleteMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Delete";
                    this.mUIDeleteMenuItem.WindowTitles.Add("MusicPlayer");
                    #endregion
                }
                return this.mUIDeleteMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mUIPropertyMenuItem;
        
        private WpfMenuItem mUIDeleteMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIQuestionWindow : WinWindow
    {
        
        public UIQuestionWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Question";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Question");
            #endregion
        }
        
        #region Properties
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIYesWindow mUIYesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Question");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Question");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAboutMusicPlayerWindow : WinWindow
    {
        
        public UIAboutMusicPlayerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "About Music Player";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("About Music Player");
            #endregion
        }
        
        #region Properties
        public UIOKWindow1 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow1(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIAboutMusicPlayerTitleBar UIAboutMusicPlayerTitleBar
        {
            get
            {
                if ((this.mUIAboutMusicPlayerTitleBar == null))
                {
                    this.mUIAboutMusicPlayerTitleBar = new UIAboutMusicPlayerTitleBar(this);
                }
                return this.mUIAboutMusicPlayerTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow1 mUIOKWindow;
        
        private UIAboutMusicPlayerTitleBar mUIAboutMusicPlayerTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOKWindow1 : WinWindow
    {
        
        public UIOKWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "okButton";
            this.WindowTitles.Add("About Music Player");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("About Music Player");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAboutMusicPlayerTitleBar : WinTitleBar
    {
        
        public UIAboutMusicPlayerTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("About Music Player");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("About Music Player");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMusicPlayerWindow1 : WinWindow
    {
        
        public UIMusicPlayerWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "MusicPlayer";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MusicPlayer");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UIMusicPlayerTitleBar
        {
            get
            {
                if ((this.mUIMusicPlayerTitleBar == null))
                {
                    this.mUIMusicPlayerTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIMusicPlayerTitleBar.WindowTitles.Add("MusicPlayer");
                    #endregion
                }
                return this.mUIMusicPlayerTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIMusicPlayerTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMusicPlayerWindow2 : WinWindow
    {
        
        public UIMusicPlayerWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "MusicPlayer";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("MusicPlayer");
            #endregion
        }
        
        #region Properties
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINOWindow mUINOWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("MusicPlayer");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("MusicPlayer");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMediaPropertyWindow : WpfWindow
    {
        
        public UIMediaPropertyWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MediaProperty";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MediaProperty");
            #endregion
        }
        
        #region Properties
        public WpfEdit UITbYearEdit
        {
            get
            {
                if ((this.mUITbYearEdit == null))
                {
                    this.mUITbYearEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITbYearEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "tbYear";
                    this.mUITbYearEdit.WindowTitles.Add("MediaProperty");
                    #endregion
                }
                return this.mUITbYearEdit;
            }
        }
        
        public WpfEdit UITbDescriptionEdit
        {
            get
            {
                if ((this.mUITbDescriptionEdit == null))
                {
                    this.mUITbDescriptionEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITbDescriptionEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "tbDescription";
                    this.mUITbDescriptionEdit.WindowTitles.Add("MediaProperty");
                    #endregion
                }
                return this.mUITbDescriptionEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUITbYearEdit;
        
        private WpfEdit mUITbDescriptionEdit;
        #endregion
    }
}
